{
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.Validation | API Documentation",
    "keywords": "OpenCollar.Extensions.Validation Support for automatic validation, update and strongly-typed access to configuration. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Validation/"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions.Validation | API Documentation",
    "keywords": "OpenCollar.Extensions.Validation The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Validation/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime. Related Project OpenCollar.Extensions OpenCollar.Extensions.Configuration OpenCollar.Extensions.Validation"
  },
  "api/OpenCollar.Extensions.Validation.html": {
    "href": "api/OpenCollar.Extensions.Validation.html",
    "title": "Namespace OpenCollar.Extensions.Validation | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Validation Classes ArgumentValidationExtensions Extension methods used in the validation of arguments. Enums EnumIs An enumeration defining the validation that can be applied to an enum value. ObjectIs Defines the type of validation to apply to an System.Object argument. StringIs Defines the type of validation to apply to a System.String argument."
  },
  "api/OpenCollar.Extensions.Validation.EnumIs.html": {
    "href": "api/OpenCollar.Extensions.Validation.EnumIs.html",
    "title": "Enum EnumIs | API Documentation",
    "keywords": "Enum EnumIs An enumeration defining the validation that can be applied to an enum value. Namespace : OpenCollar.Extensions.Validation Assembly : OpenCollar.Extensions.Validation.dll Syntax [Flags] public enum EnumIs Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description None No validation is applied. NonZero The value is any non-zero value (typically Unknown = 0). NonZeroValidMember The value is any valid, non-zero, member of the enum (typically Unknown = 0). ValidMember The value is any valid member of the enum. Extension Methods ArgumentValidationExtensions.Validate<EnumIs>(String, EnumIs)"
  },
  "api/OpenCollar.Extensions.Validation.StringIs.html": {
    "href": "api/OpenCollar.Extensions.Validation.StringIs.html",
    "title": "Enum StringIs | API Documentation",
    "keywords": "Enum StringIs Defines the type of validation to apply to a System.String argument. Namespace : OpenCollar.Extensions.Validation Assembly : OpenCollar.Extensions.Validation.dll Syntax [Flags] public enum StringIs Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description None The validation to perform is unknown or undefined. This value must never be used. NotEmpty The argument being validated must not have a length of zero or less. NotEmptyOrWhiteSpace The argument being validated must not have a length of zero or less or contain only white space characters. NotNull The argument being validated must not be null . NotNullEmptyOrWhiteSpace The argument being validated must not be null , have a length of zero or less or contain only white space characters. NotNullOrEmpty The argument being validated must not be null or have a length of zero or less. NotNullOrWhiteSpace The argument being validated must not be null or contain only white space characters. NotWhiteSpace The argument being validated must not contain only white space characters. Extension Methods ArgumentValidationExtensions.Validate<StringIs>(String, EnumIs)"
  },
  "api/OpenCollar.Extensions.Validation.ObjectIs.html": {
    "href": "api/OpenCollar.Extensions.Validation.ObjectIs.html",
    "title": "Enum ObjectIs | API Documentation",
    "keywords": "Enum ObjectIs Defines the type of validation to apply to an System.Object argument. Namespace : OpenCollar.Extensions.Validation Assembly : OpenCollar.Extensions.Validation.dll Syntax [Flags] public enum ObjectIs Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Fields Name Description None The validation to perform is unknown or undefined. This value must never be used. NotNull The argument being validated must not be null . Extension Methods ArgumentValidationExtensions.Validate<ObjectIs>(String, EnumIs)"
  },
  "api/OpenCollar.Extensions.Validation.ArgumentValidationExtensions.html": {
    "href": "api/OpenCollar.Extensions.Validation.ArgumentValidationExtensions.html",
    "title": "Class ArgumentValidationExtensions | API Documentation",
    "keywords": "Class ArgumentValidationExtensions Extension methods used in the validation of arguments. Inheritance System.Object ArgumentValidationExtensions Namespace : OpenCollar.Extensions.Validation Assembly : OpenCollar.Extensions.Validation.dll Syntax public static class ArgumentValidationExtensions Remarks The following UML has been generated directly from the source code using Jebbs PlantUML . Methods | Improve this Doc View Source Validate(Decimal, String, Decimal, Decimal) If argument is lower than lower an System.ArgumentOutOfRangeException is thrown. If argument is higher than upper an System.ArgumentOutOfRangeException is thrown. Declaration [AssertionMethod] public static void Validate(this decimal argument, [NotNull, InvokerParameterName] string argumentName, decimal lower, decimal upper) Parameters Type Name Description System.Decimal argument The argument to validate. System.String argumentName The name of the argument being validated. System.Decimal lower The minimum permitted value. System.Decimal upper The maximum permitted value Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if argument value is less than lower or higher than upper . | Improve this Doc View Source Validate(Double, String, Double, Double) If argument is lower than lower an System.ArgumentOutOfRangeException is thrown. If argument is higher than upper an System.ArgumentOutOfRangeException is thrown. Declaration [AssertionMethod] public static void Validate(this double argument, [NotNull, InvokerParameterName] string argumentName, double lower, double upper) Parameters Type Name Description System.Double argument The argument to validate. System.String argumentName The name of the argument being validated. System.Double lower The minimum permitted value. System.Double upper The maximum permitted value Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if argument value is less than lower or higher than upper . | Improve this Doc View Source Validate(Int32, String, Int32, Int32) If argument is lower than lower an System.ArgumentOutOfRangeException is thrown. If argument is higher than upper an System.ArgumentOutOfRangeException is thrown. Declaration [AssertionMethod] public static void Validate(this int argument, [NotNull, InvokerParameterName] string argumentName, int lower, int upper) Parameters Type Name Description System.Int32 argument The argument to validate. System.String argumentName The name of the argument being validated. System.Int32 lower The minimum permitted value. System.Int32 upper The maximum permitted value Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if argument value is less than lower or higher than upper . | Improve this Doc View Source Validate(String, String, StringIs) Validates the value of the specified argument according to the rules defined in validation . Declaration [AssertionMethod] [ContractArgumentValidator] public static void Validate([AssertionCondition(AssertionConditionType.IS_NOT_NULL)] this string argumentValue, [NotNull, InvokerParameterName] string argumentName, StringIs validation) Parameters Type Name Description System.String argumentValue The value of the argument to validate. System.String argumentName The name of the argument to validate (used in error messages). StringIs validation The type of validation to perform. Exceptions Type Condition System.ArgumentNullException The argument is null . System.ArgumentException The argument is zero-length. System.ArgumentException The argument contains only white space characters. | Improve this Doc View Source Validate<TEnum>(TEnum, String, EnumIs) Validates the specified argument value is a member of the enumeration type specified. Declaration [AssertionMethod] [ContractArgumentValidator] public static void Validate<TEnum>(this TEnum argumentValue, [NotNull, InvokerParameterName] string argumentName, EnumIs validation) where TEnum : struct Parameters Type Name Description TEnum argumentValue The value of the argument to validate. System.String argumentName The name of the argument to validate. EnumIs validation The type of validation to perform. Type Parameters Name Description TEnum The type of the enumeration to which the argument must belong. Exceptions Type Condition System.ArgumentException argumentValue must be an of an enum type System.ArgumentOutOfRangeException The value provided in validation was not a valid member of the EnumIs enum. System.ArgumentOutOfRangeException The value provided in argumentValue was not a valid member of the enum. System.ArgumentOutOfRangeException The value provided in argumentValue was zero. | Improve this Doc View Source Validate<T>(T, String, ObjectIs) Validates the value of the specified argument according to the rules defined in validation . Declaration [AssertionMethod] [ContractArgumentValidator] public static void Validate<T>([AssertionCondition(AssertionConditionType.IS_NOT_NULL), NoEnumeration] this T argumentValue, [NotNull, InvokerParameterName] string argumentName, ObjectIs validation) where T : class Parameters Type Name Description T argumentValue The value of the argument to validate. System.String argumentName The name of the argument to validate (used in error messages). ObjectIs validation The type of validation to perform. Type Parameters Name Description T The type of the value. Exceptions Type Condition System.ArgumentNullException The argument is null . | Improve this Doc View Source Validate<T>(IEnumerable<T>, String, ObjectIs, ObjectIs) Validates the value of the specified enumerable argument according to the rules defined in argumentValue and elementValidation and returns containing the validated argument as an array. Declaration [AssertionMethod] [ContractArgumentValidator] public static T[] Validate<T>([ItemCanBeNull, AssertionCondition(AssertionConditionType.IS_NOT_NULL)] this IEnumerable<T> argumentValue, [NotNull, InvokerParameterName] string argumentName, ObjectIs argumentValidation, ObjectIs elementValidation) where T : class Parameters Type Name Description System.Collections.Generic.IEnumerable <T> argumentValue The value of the argument to validate. System.String argumentName The name of the argument to validate (used in error messages). ObjectIs argumentValidation The type of validation to perform on the argument. ObjectIs elementValidation The type of validation to perform on the elements contained in the argument sequence. Returns Type Description T[] The contents of the argument, in an array. Type Parameters Name Description T The type of the elements in the argument. Exceptions Type Condition System.ArgumentNullException The argument is null . System.ArgumentException An element in the argument is null ."
  }
}